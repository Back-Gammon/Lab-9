///Lab 9
/*1. What is a data structure?
    They are "a collection of one or more variables of different
types, grouped together under a single name for convenient
handling"(The C Programming Language) An example of a data
structure would be an array or more traditionally a payroll
record.
2. Can two elements of an array be of different data types? Answer
or and briefly explain your answer.
    No. There cannot be a mixture of data types within a single
array. All of the values *have* to be of the *same* type.
3. Explain: What is the difference in the use of the array b
implied by these two prototypes?
int fn_one( int b[], int n);
int fn_two(const int b[], int n);
    Function two is a constant and can only be read while
function one can be modified.
4. Let name be an array of 12 type int locations (int nums[12];).
Describe how the following loop
works and give the contents of each element of array nums when
the loop finishes (assume all necessary
declarations, etc. have been correctly made):
    i = 0;
    while (i < 12){
         scanf(, &n);
         nums[i] = n;
         i += 1;
}
    The loop functions so that it takes in the input of the use
12 times and assigning each of values into the array spot one at
a time. The contents of the array would be whatever integers the
used inputed into the function.
5. An array is declared by: double m [2][4];
a) how many elements does array m have (numeric answer)?
b) show how you would reference each element.
    That array is multidimensional which means that elements are
stored on two planes. In total, it can hold a max of 8 elements.
To reference an element would be in the format of m[a][b] where
"m" is the name of the array and "a" and "b" are are the
subscripts that identify the element.
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define studentIDlen 3
int main(){
    FILE* ptr;
    ptr = fopen("examdata.txt", "r");
    if (ptr == NULL){
         printf("there was a problem opening examdata.txt\n");
         return 1;
    }
    int num_answers;
    fscanf(ptr, "%d", &num_answers);
    char space;
    fscanf(ptr,"%c", &space);
    char correct_answers[num_answers];
    int ind = 0;
    while (ind <=  num_answers){
         fscanf(ptr, "%c", &correct_answers[ind]);
ind += 1; }
    //read in the new line character

 char newline;
 fscanf(ptr, "%c", newline);
 FILE* ptr2 = fopen("report.txt", "w");
 if (ptr2 == NULL){
      printf("there was a problem opening report.txt\n");
      return 1;
    }
 fprintf(ptr2,"Exam Report \n");
 fprintf(ptr2,"Question ");
 ind = 1;
 while (ind <= num_answers){
      fprintf(ptr2, "%d ", ind);
ind += 1; }
 fprintf(ptr2,"\n");
 fprintf(ptr2, "Answers  ");
 ind = 0;
 while (ind <= num_answers){
     fprintf(ptr2, "%c ", correct_answers[ind]);
ind += 1; }
fprintf(ptr2,"\nID     Score\n");
 char user_answers[num_answers];
 while (69420){
     int id_num;
     //scan in the user id
     fscanf(ptr, "%d", &id_num);
     //scan in the space
     char space;
     fscanf(ptr,"%c", &space);
     //scan the user's answers into the user_anwsers array
     ind = 0;

while (ind <  num_answers){
         fscanf(ptr, "%c", &user_answers[ind]);
         ind += 1;
}
        //iterate through the user_answers array and compare each
answer to the answers stored in correct_answers to get the number
of correct answers
        int user_correct_answers = 0;
        for (int i = 0; i <= num_answers; i++){
           if (user_answers[i] == correct_answers[i]){
              user_correct_answers++;
} }
        //compute the score and write to the file, along with a
newline character
        float user_score =
100*((float)user_correct_answers/num_answers);
         fprintf(ptr2, "%d     %.0f%\n", id_num, user_score);
        char newline_or_EOF;
        newline_or_EOF = fgetc(ptr);
        if (newline_or_EOF == EOF){
            break;
} }
    return 0;
    //closes the two files
    fclose(ptr);
    fclose(ptr2);
}
